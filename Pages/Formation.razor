@page "/formations"
@using Radzen
@using Radzen.Blazor
@using BlazorPortfolio.Models
@inject IJSRuntime JSRuntime

@if (ShowPageTitle)
{
    <PageTitle>Formations</PageTitle>
}

@if (isMobile == null)
{
    <p>Chargement...</p>
}
else if (isMobile == true)
{
    <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" Class="rz-p-2 rz-shadow-4 rz-border-radius-2" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
        <RadzenText TextStyle="TextStyle.H4" Class="rz-mb-2" TextAlignment="TextAlignment.Center">🎓 Formations </RadzenText>

        @foreach (var formation in FormationsList)
        {
            <!--<RadzenCard Class="rz-shadow-2 rz-w-100 rz-p-2">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenText Style="font-size: 0.8rem; font-weight: 600;" Class="rz-mb-0">
                        <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@(formation.AnneeDebut + "-" + formation.AnneeFin)" class="rz-me-2" />
                        <b>@formation.Titre</b>
                    </RadzenText>
                    <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="@formation.Mention" Visible="@(!string.IsNullOrEmpty(formation.Mention))" />
                    <hr style="border: none; background-color: var(--rz-text-disabled-color); height: 1px; margin: 0.1rem 0;" />
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.2rem">
                        @if (!string.IsNullOrEmpty(formation.ImageEcole))
                        {
                            <RadzenImage Path="@formation.ImageEcole" AlternateText="@formation.Etablissement" Style="width: 80px; height: 80px; border-radius: 50%" />
                        }
                        <RadzenStack Gap="0">
                            <RadzenText TextStyle="TextStyle.Body2" Class="rz-mb-0">@formation.Etablissement</RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption">@formation.Lieu</RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                    <RadzenButton Text="Détails" ButtonStyle="ButtonStyle.Primary" Click="@(() => ShowFormationDetails(formation))" Style="font-size: 0.75rem; padding: 0.25rem 0.5rem; width: 100%;" />
                </RadzenStack>
            </RadzenCard>-->
            <RadzenCard Class="formation-card formation-card--mobile">
                <div class="formation-header">
                    <span class="formation-year">@formation.AnneeDebut-@formation.AnneeFin</span>
                    <span class="formation-title">@formation.Titre</span>
                    <RadzenBadge class="formation-mention"
                                 BadgeStyle="BadgeStyle.Success"
                                 Text="@formation.Mention"
                                 Visible="@(!string.IsNullOrEmpty(formation.Mention))" />
                </div>

                <hr class="formation-sep" />

                <div class="formation-body">
                    @if (!string.IsNullOrEmpty(formation.ImageEcole))
                    {
                        <img class="formation-logo formation-logo--sm" src="@formation.ImageEcole" alt="@formation.Etablissement" />
                    }

                    <div class="formation-texts">
                        <div class="formation-school">@formation.Etablissement</div>
                        <div class="formation-location">@formation.Lieu</div>
                    </div>

                    <RadzenButton class="formation-btn formation-btn--full"
                                  Text="Détails"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Click="@(() => ShowFormationDetails(formation))" />
                </div>
            </RadzenCard>
        }
    </RadzenStack>
}
else
{
    <RadzenStack Orientation="Orientation.Vertical" Gap="2rem" Class="rz-p-4 rz-shadow-4 rz-border-radius-2" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
        <RadzenText TextStyle="TextStyle.H3" Class="rz-mb-4" TextAlignment="TextAlignment.Center">🎓 Formations </RadzenText>

        @* 'FormationsList' will be the name of your collection, and 'formation' will be an individual item of type 'Formations' *@
        @foreach (var formation in FormationsList)
        {
            <!--<RadzenCard Class="rz-shadow-2 rz-w-100 rz-max-width-600 rz-p-3">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="9">
                            <RadzenText TextStyle="TextStyle.H6" Class="rz-mb-0">
                                <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@(formation.AnneeDebut + "-" + formation.AnneeFin)" class="rz-me-2" />
                                <b>@formation.Titre</b>
                            </RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="3" Class="rz-text-align-end">
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="@formation.Mention" Visible="@(!string.IsNullOrEmpty(formation.Mention))" />
                        </RadzenColumn>
                    </RadzenRow>

                    <hr style="border: none; background-color: var(--rz-text-disabled-color); height: 1px; margin: 0.5rem 0;" />

                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                            @if (!string.IsNullOrEmpty(formation.ImageEcole))
                            {
                                <RadzenImage Path="@formation.ImageEcole" AlternateText="@formation.Etablissement" Style="width: 150px; height: 150px; border-radius: 50%" />
                            }
                            <RadzenStack Gap="0">
                                <RadzenText TextStyle="TextStyle.Body1" Class="rz-mb-0">@formation.Etablissement</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@formation.Lieu</RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenButton Text="Détails" ButtonStyle="ButtonStyle.Primary" Click="@(() => ShowFormationDetails(formation))" Style="font-size: 0.75rem; padding: 0.25rem 0.5rem;" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>-->
            <RadzenCard Class="formation-card">
                <div class="formation-header">
                    <span class="formation-year">@formation.AnneeDebut-@formation.AnneeFin</span>
                    <span class="formation-title">@formation.Titre</span>
                    <RadzenBadge class="formation-mention"
                                 BadgeStyle="BadgeStyle.Success"
                                 Text="@formation.Mention"
                                 Visible="@(!string.IsNullOrEmpty(formation.Mention))" />
                </div>

                <hr class="formation-sep" />

                <div class="formation-body">
                    @if (!string.IsNullOrEmpty(formation.ImageEcole))
                    {
                        <img class="formation-logo" src="@formation.ImageEcole" alt="@formation.Etablissement" />
                    }

                    <div class="formation-texts">
                        <div class="formation-school">@formation.Etablissement</div>
                        <div class="formation-location">@formation.Lieu</div>
                        @if (!string.IsNullOrEmpty(formation.DescriptionCourte))
                        {
                            <div class="formation-desc">@formation.DescriptionCourte</div>
                        }
                    </div>

                    <RadzenButton class="formation-btn"
                                  Text="Détails"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Click="@(() => ShowFormationDetails(formation))" />
                </div>
            </RadzenCard>
        }
    </RadzenStack>
}

<style>
    .formation-card {
        position: relative;
        border-radius: 12px;
        padding: 14px 16px 16px;
        border: 1px solid rgba(0,0,0,.06);
        box-shadow: 0 1px 2px rgba(0,0,0,.04);
        transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
        overflow: hidden;
    }

        .formation-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 22px rgba(0,0,0,.10), 0 2px 6px rgba(0,0,0,.06);
            border-color: rgba(25,118,210,.25);
        }

    .formation-card--mobile {
        padding: 12px;
    }

    .formation-header {
        display: flex;
        align-items: center;
        gap: .75rem;
    }

    .formation-year {
        font-weight: 700;
        font-size: .9rem;
        padding: .35rem .6rem;
        border-radius: 8px;
        color: #374151;
        background: #eef2f7;
        border: 1px solid rgba(0,0,0,.06);
    }

    .formation-title {
        font-weight: 800;
        font-size: clamp(1rem, .9rem + .4vw, 1.25rem);
        letter-spacing: .2px;
        text-transform: uppercase;
        flex: 1;
    }

    .formation-mention {
        font-weight: 700;
        letter-spacing: .4px;
    }

    .formation-sep {
        border: none;
        height: 1px;
        background: var(--rz-text-disabled-color, #e5e7eb);
        margin: .6rem 0 .9rem;
    }

    .formation-body {
        display: grid;
        grid-template-columns: auto 1fr auto;
        align-items: center;
        gap: 1rem;
    }

    .formation-logo {
        width: 120px;
        height: 120px;
        border-radius: 14px;
        object-fit: contain;
        background: #fff;
        border: 1px solid rgba(0,0,0,.05);
        box-shadow: 0 2px 10px rgba(0,0,0,.06);
    }

    .formation-logo--sm {
        width: 80px;
        height: 80px;
    }

    .formation-texts {
        display: flex;
        flex-direction: column;
        gap: .15rem;
    }

    .formation-school {
        font-size: 1.05rem;
        font-weight: 700;
    }

    .formation-location {
        color: var(--rz-text-secondary-color,#6b7280);
    }

    .formation-desc {
        color: var(--rz-text-secondary-color,#6b7280);
        margin-top: .25rem;
    }

    .formation-btn {
        margin-left: auto;
        min-width: 120px;
        font-weight: 700;
        border-radius: 10px;
        box-shadow: 0 6px 14px rgba(63,81,181,.18);
    }

    @@container (max-width: 680px) {
        .formation-body {
            grid-template-columns: auto 1fr;
        }

        .formation-btn {
            grid-column: 1 / -1;
            width: 100%;
            margin-left: 0;
        }
    }

    @@media (max-width: 800px) {
        .formation-body {
            grid-template-columns: auto 1fr;
        }

        .formation-btn {
            grid-column: 1 / -1;
            width: 100%;
            margin-left: 0;
        }
    }

    @@media (prefers-color-scheme: dark) {
        .formation-card {
            border-color: rgba(255,255,255,.08);
            background: #0f1317;
        }

            .formation-card:hover {
                border-color: rgba(66,165,245,.35);
            }

        .formation-year {
            background: #0e1b27;
            color: #cfe6ff;
            border-color: rgba(66,165,245,.25);
        }

        .formation-logo {
            background: #0c0f12;
            border-color: rgba(255,255,255,.06);
        }
    }
</style>

@code {
    [Parameter] public bool ShowPageTitle { get; set; } = true;
    [Inject]
    public DialogService? DialogService { get; set; }

    private bool? isMobile = null;

    // Use 'Formations' as the type for individual items in the list
    private List<Formations> FormationsList { get; set; } = new List<Formations>(); // Renamed for clarity

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var width = await JSRuntime.InvokeAsync<int>("getWindowWidth");
            Console.WriteLine($"💡 Largeur détectée : {width}px");
            isMobile = width <= 768; // Détecte si la largeur est inférieure ou égale à 768px (taille typique pour mobile)
            StateHasChanged(); // Informe Blazor que l'état du composant a changé
        }
    }

    protected override void OnInitialized()
    {
        // Initialize with 'Formations' class
        FormationsList = new List<Formations>
        {
            new Formations // <<< Use 'Formations' here
            {
                Titre = "MASTER MIAGE, IA2",
                Etablissement = "Université Côte d'Azur",
                Lieu = "Sophia Antipolis, France",
                AnneeDebut = 2023,
                AnneeFin = 2025,
                Mention = "En cours",
                DescriptionCourte = "Master MIAGE (Méthodes Informatiques Appliquées à la Gestion des Entreprises), spécialité en dernière année en Intelligence Artificielle Appliquée. Axé sur les techniques modernes d'apprentissage automatique et le développement d'applications intelligentes.",
                CompetencesAcquises = new List<string> { "Deep Learning", "Machine Learning", "Traitement du langage naturel", "Développement full-stack (Java, Python, Angular, Spring, Flutter, Dart, FastAPI)", "Cloud Computing (Azure, AWS)", "Méthodes Agiles", "Ingénierie des besoins" },
                CertificatUrl = "https://example.com/master_ia2.pdf",
                ImageEcole = "images/unice.webp"
             },
            new Formations // <<< Use 'Formations' here
            {
                Titre = "LICENCE MIAGE",
                Etablissement = "Université Côte d'Azur",
                Lieu = "Sophia Antipolis, France",
                AnneeDebut = 2022,
                AnneeFin = 2023,
                Mention = "Assez Bien",
                DescriptionCourte = "Licence en Méthodes Informatiques Appliquées à la Gestion des Entreprises. Acquisition des bases solides en informatique et en gestion de projet.",
                CompetencesAcquises = new List<string> { "Gestion de projet IT", "Bases de données (SQL, NoSQL)", "Développement web (HTML, CSS, JavaScript, PHP)", "Systèmes d'information", "Programmation orientée objet (Java, Python)" },
                CertificatUrl = "https://example.com/licence_miage.pdf",
                ImageEcole = "images/unice.webp"
            },
            new Formations // <<< Use 'Formations' here
            {
                Titre = "DUT STID",
                Etablissement = "IUT de Nice",
                Lieu = "Sophia Antipolis, France",
                AnneeDebut = 2020,
                AnneeFin = 2022,
                Mention = "Bien",
                DescriptionCourte = "Diplôme Universitaire de Technologie en Statistiques et Informatique Décisionnelle. Formation axée sur l'analyse de données et la prise de décision.",
                CompetencesAcquises = new List<string> { "Statistiques descriptives et inférentielles", "Modélisation prédictive", "Programmation Java, Python et R pour l'analyse de données", "Business Intelligence (Power BI, SAS)", "Exploration de données", "Bases de données" },
                CertificatUrl = "https://example.com/dut_stid.pdf",
                ImageEcole = "images/iut.png"
            },
            new Formations // <<< Use 'Formations' here
            {
                Titre = "LICENCE 1 EN MPI",
                Etablissement = "Université Cheikh Anta Diop (UCAD)",
                Lieu = "Dakar, Sénégal",
                AnneeDebut = 2018,
                AnneeFin = 2020,
                Mention = "Suspendu",
                DescriptionCourte = "Première année de licence en mathématiques, physique et informatique, fournissant les bases pour les études informatiques et scientifiques.",
                CompetencesAcquises = new List<string> { "Algèbre linéaire", "Analyse mathématique", "Probabilité", "Statistiques", "Mécanique du point", "Électricité", "Algorithmique et introduction à la programmation" },
                CertificatUrl = "https://example.com/l1_ucad.pdf",
                ImageEcole = "images/ucad2.png"
            }
        };
    }

    // The parameter type must now be 'Formations' (plural)
    async Task ShowFormationDetails(Formations formation) // <<< Changed to 'Formations'
    {
        await DialogService!.OpenAsync<FormationDetailsDialog>(
            formation.Titre, // Title of the dialog
            new Dictionary<string, object>() { { "CurrentFormation", formation } }, // Parameters to pass to the dialog
            new DialogOptions() { Width = "700px", Height = "auto", Resizable = true, Draggable = true }
        );
    }
}
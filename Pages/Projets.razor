@page "/projets"
@using Radzen
@using Radzen.Blazor
@using BlazorPortfolio.Models
@inject IJSRuntime JSRuntime

@if (ShowPageTitle)
{
    <PageTitle>Projets</PageTitle>
}

<RadzenStack Orientation="Orientation.Vertical" Gap="2rem" Class="rz-p-4">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Class="rz-mb-2">
        <RadzenIcon Icon="code" Style="font-size: 2em;" />
        <RadzenText TextStyle="TextStyle.H3" Class="rz-mb-2" TextAlignment="TextAlignment.Center"> Projets </RadzenText>
    </RadzenStack>

    <RadzenRow Class="rz-mx-auto" Style="max-width: 1200px;" Gap="2rem">
        @foreach (var projet in projets)
        {
            <!--<RadzenColumn Size="12" SizeMD="4">
                <RadzenCard Style="height: 100%; padding: 1rem;" Class="rz-shadow-2">
                    @if (projet.Images != null && projet.Images.Any())
                    {
                        <RadzenCarousel Autoplay="true" AutoplayInterval="3000" ShowArrows="true" ShowPagers="true"
                                        Style="width: 100%; height: 200px; border-radius: 0.5rem; overflow: hidden;">
                            <Items>
                                @foreach (var imgPath in projet.Images)
                                {
                                    <RadzenCarouselItem Style="height: 200px;">
                                        <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; background-color: #f9f9f9;">
                                            <img src="@($"/{imgPath}")" alt="image projet"
                                                 style="max-width: 90%; max-height: 90%; object-fit: contain; border-radius: 0.5rem; transition: opacity 1s ease;" />
                                        </div>
                                    </RadzenCarouselItem>
                                }
                            </Items>
                        </RadzenCarousel>

                    }
                    else
                    {
                        <img src="/images/iut.jpg" alt="image par défaut"
                             style="width: 100%; height: 200px; object-fit: cover; border-radius: 0.5rem;" />
                    }


                    <RadzenText Text="@projet.Titre" TextStyle="TextStyle.H6" Class="rz-mt-3" />

                    <RadzenText Text="@projet.Description" TextStyle="TextStyle.Body2" Class="rz-mt-1 rz-text-justify" />

                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" Wrap="Radzen.FlexWrap.Wrap" Class="rz-mt-2">
                        @foreach (var tech in projet.Technologies)
                        {
                            <RadzenBadge Text="@tech" Style="background-color: #e0e0e0; color: #333;" />
                        }
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" Class="rz-mt-3">
                        @if (!string.IsNullOrEmpty(projet.LienGithub))
                        {
                            <RadzenLink Path="@projet.LienGithub" Target="_blank">
                                <RadzenIcon Icon="code" Style="color: #333;" />
                            </RadzenLink>
                        }
                        @if (!string.IsNullOrEmpty(projet.LienDemo))
                        {
                            <RadzenLink Path="@projet.LienDemo" Target="_blank">
                                <RadzenIcon Icon="launch" Style="color: #1976d2;" />
                            </RadzenLink>
                        }
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>-->
            <RadzenColumn Size="12" SizeMD="4">
                <RadzenCard Style="height: 100%; padding: 1rem;" Class="rz-shadow-2 proj-card">
                    <div class="proj-media">
                        @if (projet.Images != null && projet.Images.Any())
                        {
                            <RadzenCarousel Autoplay="true" AutoplayInterval="3000" ShowArrows="true" ShowPagers="true"
                                            Style="width: 100%; height: 200px; border-radius: 0.5rem; overflow: hidden;">
                                <Items>
                                    @foreach (var imgPath in projet.Images)
                                    {
                                        <RadzenCarouselItem Style="height: 200px;">
                                            <div class="proj-media-frame">
                                                <img src="@($"/{imgPath}")" alt="image projet" class="proj-img" />
                                            </div>
                                        </RadzenCarouselItem>
                                    }
                                </Items>
                            </RadzenCarousel>
                        }
                        else
                        {
                            <img src="/images/iut.jpg" alt="image par défaut" class="proj-img proj-img--static" />
                        }
                        <div class="proj-glow"></div>
                    </div>

                    <RadzenText Text="@projet.Titre" TextStyle="TextStyle.H6" Class="rz-mt-3 proj-title" />
                    <RadzenText Text="@projet.Description" TextStyle="TextStyle.Body2" Class="rz-mt-1 rz-text-justify proj-desc" />

                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" Wrap="Radzen.FlexWrap.Wrap"
                                 Class="rz-mt-2 proj-chips">
                        @foreach (var tech in projet.Technologies)
                        {
                            <span class="proj-chip">@tech</span>
                        }
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem"
                                 Class="rz-mt-3 proj-actions">
                        @if (!string.IsNullOrEmpty(projet.LienGithub))
                        {
                            <RadzenLink Path="@projet.LienGithub" Target="_blank" class="proj-action">
                                <RadzenIcon Icon="code" />
                            </RadzenLink>
                        }
                        @if (!string.IsNullOrEmpty(projet.LienDemo))
                        {
                            <RadzenLink Path="@projet.LienDemo" Target="_blank" class="proj-action proj-action--primary">
                                <RadzenIcon Icon="launch" />
                            </RadzenLink>
                        }
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        }
    </RadzenRow>
</RadzenStack>

<style>
    /* ----- Carte ----- */
    .proj-card {
        position: relative;
        border-radius: 14px;
        overflow: hidden;
        transition: transform .18s ease, box-shadow .18s ease, border-color .2s ease;
        border: 1px solid rgba(0,0,0,.06);
    }

        .proj-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 14px 28px rgba(0,0,0,.12), 0 6px 12px rgba(0,0,0,.08);
            border-color: rgba(25,118,210,.25);
        }

    /* ----- Média haut (image/carrousel) ----- */
    .proj-media {
        position: relative;
        border-radius: 8px;
        overflow: hidden;
    }

    .proj-media-frame {
        width: 100%;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f9f9f9;
    }

    .proj-img {
        max-width: 100%;
        max-height: 100%;
        object-fit: cover;
        width: 100%;
        height: 200px;
        border-radius: 8px;
        transform: scale(1);
        transition: transform .35s ease, filter .35s ease;
    }

    .proj-img--static {
        object-fit: cover;
    }

    .proj-card:hover .proj-img {
        transform: scale(1.04);
        filter: saturate(1.05) contrast(1.02);
    }

    /* halo dégradé doux quand hover */
    .proj-glow {
        pointer-events: none;
        position: absolute;
        inset: 0;
        background: radial-gradient(120% 70% at 50% -10%, rgba(66,165,245,.35), transparent 60%);
        opacity: 0;
        transition: opacity .3s ease;
    }

    .proj-card:hover .proj-glow {
        opacity: 1;
    }

    /* ----- Titre & description ----- */
    .proj-title {
        letter-spacing: .2px;
    }

    .proj-desc {
        color: var(--rz-text-secondary-color,#6b7280);
    }

    /* ----- Chips tech ----- */
    .proj-chips {
        gap: .45rem;
    }

    .proj-chip {
        background: #eef2f7;
        color: #334155;
        padding: .35rem .6rem;
        border-radius: 999px;
        font-weight: 600;
        font-size: .83rem;
        box-shadow: 0 1px 2px rgba(0,0,0,.08);
        transition: transform .12s ease, box-shadow .12s ease, background .2s ease;
    }

        .proj-chip:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 14px rgba(59,130,246,.18);
            background: #e3ebff;
        }

    /* ----- Actions (icônes) ----- */
    .proj-actions .proj-action {
        width: 36px;
        height: 36px;
        border-radius: 10px;
        display: grid;
        place-items: center;
        background: #f3f4f6;
        color: #333;
        text-decoration: none;
        transition: transform .15s ease, background .2s ease, box-shadow .15s ease;
    }

        .proj-actions .proj-action:hover {
            transform: translateY(-2px);
            background: #e8ebf7;
            box-shadow: 0 6px 14px rgba(0,0,0,.12);
        }

    .proj-actions .proj-action--primary {
        background: #e8f1ff;
        color: #1976d2;
    }

        .proj-actions .proj-action--primary:hover {
            background: #d9e9ff;
        }

    /* animations d’arrivée */
    @@keyframes proj-fade-up {
        from

    {
        opacity: 0;
        transform: translateY(6px)
    }

    to {
        opacity: 1;
        transform: none
    }

    }

    .proj-card {
        animation: proj-fade-up .35s ease both;
    }

    /* accessibilité */
    @@media (prefers-reduced-motion: reduce) {
        .proj-card, .proj-img, .proj-chip, .proj-action, .proj-glow

    {
        transition: none !important;
        animation: none !important;
    }

    }

    /* dark mode doux */
    @@media (prefers-color-scheme: dark) {
        .proj-card

    {
        border-color: rgba(255,255,255,.08);
        background: #0f1317;
    }

    .proj-chip {
        background: #122033;
        color: #dbeafe;
    }

    .proj-actions .proj-action {
        background: #16202b;
        color: #e5e7eb;
    }

    .proj-actions .proj-action--primary {
        background: #0f2b4a;
        color: #7fb7ff;
    }
        /* accent dégradé qui glisse autour de la carte */
        .proj-card {
            position: relative;
            border-radius: 14px;
            will-change: transform, box-shadow;
            transition: transform .25s ease, box-shadow .25s ease, border-color .25s ease;
            transform-style: preserve-3d;
        }
            /* bordure gradient animée */
            .proj-card::before {
                content: "";
                position: absolute;
                inset: -1px;
                border-radius: 16px;
                padding: 1px; /* épaisseur de la “bordure” */
                background: linear-gradient(130deg,#7aa8ff,transparent 30%, #b892ff 70%, transparent);
                -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
                -webkit-mask-composite: xor;
                mask-composite: exclude;
                opacity: 0;
                transform: scale(0.98);
                transition: opacity .25s ease, transform .25s ease;
            }

            .proj-card:hover::before {
                opacity: 1;
                transform: none;
            }
            /* balayage lumineux */
            .proj-card::after {
                content: "";
                position: absolute;
                inset: 0;
                background: linear-gradient(115deg, transparent 35%, rgba(255,255,255,.15), transparent 65%);
                transform: translateX(-120%);
                transition: transform .6s ease;
                pointer-events: none;
            }

            .proj-card:hover::after {
                transform: translateX(120%);
            }
            /* élévation de la carte au survol (plus sensible) */
            .proj-card:hover {
                transform: translateY(-6px) scale(1.01);
                box-shadow: 0 18px 34px rgba(0,0,0,.12), 0 8px 16px rgba(0,0,0,.08);
                border-color: rgba(25,118,210,.28);
            }
        /* micro “lift” du contenu */
        .proj-title, .proj-desc, .proj-chips, .proj-actions {
            transition: transform .25s ease, opacity .25s ease;
        }

        .proj-card:hover .proj-title {
            transform: translateY(-2px);
        }

        .proj-card:hover .proj-desc {
            transform: translateY(-1px);
        }

        .proj-card:hover .proj-chips {
            transform: translateY(-3px);
        }

        .proj-card:hover .proj-actions {
            transform: translateY(-3px);
        }

        /* apparition des cartes au chargement */
        @@keyframes proj-fade-up {
            from {
                opacity: 0;
                transform: translateY(8px)
            }

            to {
                opacity: 1;
                transform: none
            }
        }

        .proj-card {
            animation: proj-fade-up .4s ease both;
        }
        }
</style>

@code {
    [Parameter] public bool ShowPageTitle { get; set; } = true;

    List<Projet> projets = new()
    {
        new Projet
        {
            Titre = "BestProfiles - IA pour le recrutement",
            Description = "Plateforme innovante de tri et de matching de CVs basée sur l’IA et le NLP, développée en auto-entrepreneur. BestProfiles permet aux recruteurs et établissements d’enseignement de gagner un temps considérable dans la présélection des candidatures grâce à un scoring intelligent, au matching automatique avec les offres et à un chatbot conversationnel. La solution intègre un front Angular ergonomique, un backend Python (FastAPI) orchestrant les modèles NLP et le scoring et une base vectorielle (ChromaDB) pour les recherches avancées. Des benchmarks intégrés démontrent les gains de temps (de 5 à 1000 CVs) et la précision des résultats par rapport à une sélection manuelle.",
            Technologies = new List<string> { "Angular", "Node.js", "FastAPI", "Python", "NLP", "Docker", "Docker Compose", "MongoDB", "ChromaDB", "Langchain", "OpenAI", "Swagger" },
            Images = new List<string> { "images/BestProfiles.svg" },
            LienGithub = "https://github.com/dioprawane/best_profiles_frontend",
            LienDemo = "https://www.bestprofiles.fr"
        },
        new Projet
        {
            Titre = "CICJ Immo – Application de Gestion Immobilière & Consultance Juridique",
            Description = "Application web développée pour une agence immobilière et de consultance juridique au Sénégal 🇸🇳. Elle permet la mise en ligne, la consultation et la gestion des biens immobiliers et services juridiques, avec un espace administrateur complet pour ajouter, modifier ou supprimer annonces et articles. Les images sont stockées et optimisées via Cloudinary (après migration depuis Base64). Le projet intègre un frontend responsive en React (desktop & mobile), un backend Node.js/Express, une base de données MongoDB structurée pour répondre aux besoins métiers, et un déploiement sur Render avec nom de domaine configuré via Squarespace.",
            Technologies = new List<string> { "React", "Node.js", "Express", "MongoDB", "Cloudinary", "Render", "JSON" },
            Images = new List<string> { "images/i1.jfif", "images/i2.jfif", "images/i3.jfif", "images/react.svg" },
            LienGithub = "",
            LienDemo = "https://cicjimmo.com"
        },
        new Projet
        {
            Titre = "Langue des Signes – Application IA de Vision par Ordinateur",
            Description = "Application web de reconnaissance de la Langue des Signes en temps réel, combinant vision par ordinateur et intelligence artificielle. Développée avec un frontend HTML/JS utilisant WebRTC pour capter le flux vidéo directement dans le navigateur, et un backend Flask/Python basé sur OpenCV, TensorFlow et Keras (CNN). La solution traduit l’alphabet et certains gestes en texte puis en parole, tout en offrant une interface interactive permettant de construire des mots et phrases, de mettre en pause ou réinitialiser la détection. Ce projet illustre l’intégration d’un pipeline IA complet et accessible en ligne, pensé pour l’inclusion et l’expérimentation académique.",
            Technologies = new List<string>
            {
                "HTML", "CSS", "JavaScript", "Flask", "OpenCV", "TensorFlow", "Keras", "Python", "WebRTC", "CNN"
            },
            Images = new List<string>
            {
                "images/unice.webp",
                "images/sign1.png"
            },
            LienGithub = "https://github.com/dioprawane/front_sign_language_computer_vision_IA2", // backend IA
            LienDemo = "https://front-sign-language-computer-vision-ia2.onrender.com/" // frontend
        },
        new Projet
        {
            Titre = "Flutter Vinted – Marketplace Mode",
            Description = "Développement mobile visant à concevoir un MVP d’une application inspirée de Vinted. Développée en Flutter et connectée à Firebase, elle permet de consulter les articles, d’afficher leurs détails et de gérer un panier. En complément, un module innovant de prédiction automatique de la catégorie vestimentaire a été intégré : un modèle CNN entraîné sur des images, accessible via une API, classe les vêtements lors de l’ajout. Ce projet met en avant l’architecture mobile complète, la sécurité et l’intégration d’une IA de Computer Vision.",
            Technologies = new List<string>
            {
                "Flutter",
                "Firebase Auth",
                "Firestore",
                "Dart",
                "REST API",
                "CNN"
            },
            Images = new List<string>
            {
                "images/unice.webp",
                "images/flutter.svg"
            },
            LienGithub = "https://github.com/dioprawane/flutter_vinted_projet",
            LienDemo = "" // pas de demo live, mais on peut déployer si tu le souhaites
        },
        new Projet
        {
            Titre = "Optimisation GPU de l’algorithme Viola-Jones",
            Description = "Projet académique réussi avec brio visant à réimplémenter et optimiser l’algorithme classique de détection de visages de Viola & Jones. L’objectif principal était d’accélérer le calcul en déplaçant les opérations intensives (images intégrales, scans, transpositions) du CPU vers le GPU via CUDA. Le projet inclut une version CPU et une version GPU, des benchmarks comparatifs, ainsi qu’une détection multi-étapes améliorée pour obtenir de meilleures performances.",
            Technologies = new List<string> { "Python", "CUDA", "NumPy", "OpenCV", "Pillow" },
            Images = new List<string> { "images/unice.webp", "images/physics_result.jpg" },
            LienGithub = "https://github.com/dioprawane/projet_viola_jones_ML",
            LienDemo = ""
        },
        new Projet
        {
            Titre = "AssignmentApp – Gestion des Devoirs en Ligne",
            Description = "Application web développée avec Angular et Node.js pour gérer les devoirs (assignments) : ajout, modification, suppression et suivi. Intégration d’Angular Material pour l’UI, gestion de collections (élèves, matières), pagination, filtres, formulaires avancés (Stepper) et popups de détails. Le projet inclut un back-end MongoDB et l’hébergement complet (front et back) sur Render. Des dashboards interactifs Power BI ont été intégrés pour le suivi des données.",
            Technologies = new List<string> { "Angular", "Node.js", "MongoDB", "Angular Material", "Power BI", "Render" },
            Images = new List<string> { "images/unice.webp", "images/angular.svg" },
            LienGithub = "https://github.com/dioprawane/DIOP_PRUDENT_AngularProjetAssignments",
            LienDemo = "https://service2222-projet-angular-front-end.onrender.com"
        },
        new Projet
        {
            Titre = "Pricing Immobilier & Prédiction d’Obésité",
            Description = "Projets académiques en R et Python combinant régression linéaire (simple et multiple) pour estimer le prix des maisons à partir de variables clés (surface, localisation, pièces, etc.) et modèles de Machine Learning pour prédire le risque d’obésité à partir de données socio-démographiques et médicales. Analyse des performances, comparaison des métriques et interprétation des facteurs influents.",
            Technologies = new List<string> { "R", "RStudio", "Python", "Scikit-learn", "TensorFlow", "Data Mining", "Machine Learning", "Régression" },
            Images = new List<string> { "images/iut.png" }
        },
    };
}

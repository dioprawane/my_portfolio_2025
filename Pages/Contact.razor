@page "/contact"
@using Radzen
@using Radzen.Blazor
@inject DialogService DialogService
@inject NotificationService NotificationService
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using Radzen.Blazor.Rendering @* NEW: Add this using directive for TemplateFormInvalidSubmitEventArgs *@
@inject IJSRuntime JSRuntime // Assurez-vous d'avoir ceci
@using BlazorPortfolio.Models
@using Microsoft.Extensions.Options
@inject IOptions<EmailJSSettings> EmailJSOptions

@if (ShowPageTitle)
{
    <PageTitle>Contacts</PageTitle>
}

<style>
    /* Réduit le padding bas de la page */
    .contact-page {
        padding-bottom: .5rem;
    }

    /* Supprime les grands espaces sous les fieldsets */
    .contact-fs {
        margin-bottom: .5rem !important;
    }

    /* Allège l’espace au-dessus du bouton */
    .submit-row {
        padding-top: .5rem !important;
    }

    /* Si tu veux serrer encore plus : réduire l'écart horizontal entre colonnes */
    /* .rz-row { column-gap: 1rem !important; } */
    /* Étire les fieldsets à la même hauteur */
    .equal-col {
        display: flex;
    }

    .equal-card {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
    }

    /* Sur mobile, on laisse la hauteur s'ajuster naturellement */
    @@media (max-width: 768px) {
        .equal-card

    {
        height: auto;
    }

    }
</style>


<RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="2rem" Class="contact-page rz-pt-4 rz-px-4 rz-pb-1 rz-text-align-center">

    <RadzenText Text="Contactez-moi" TextStyle="TextStyle.H4" TagName="TagName.H1" Class="rz-mb-4" />

    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4 rz-w-100 rz-mx-auto" Style="max-width: 1200px; align-items: stretch;">
        <RadzenColumn Size="12" SizeMD="5" Class="equal-col">
            <RadzenFieldset Text="Mes Coordonnées"
                            Class="rz-shadow-1 equal-card"
                            Style="display:flex; flex-direction:column; justify-content:flex-start;">
                <RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="1rem">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem" JustifyContent="Radzen.JustifyContent.Start">
                        <RadzenIcon Icon="email" Class="rz-text-primary" Style="font-size: 1.5rem;" />
                        <RadzenLink Path="mailto:dioprawane1601@gmail.com" Text="dioprawane1601@gmail.com" Class="rz-text-truncate" />
                    </RadzenStack>

                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem" JustifyContent="Radzen.JustifyContent.Start">
                        <RadzenIcon Icon="email" Class="rz-text-primary" Style="font-size: 1.5rem;" />
                        <RadzenLink Path="mailto:dioprawane1601@icloud.com" Text="dioprawane1601@icloud.com" Class="rz-text-truncate" />
                    </RadzenStack>


                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem" JustifyContent="Radzen.JustifyContent.Start">
                        <RadzenIcon Icon="phone" Class="rz-text-primary" Style="font-size: 1.5rem;" />
                        <RadzenLink Path="tel:+33123456789" Text="+33 6 11 99 99 63" /> @* Remplacez par votre numéro *@
                    </RadzenStack>

                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem" JustifyContent="Radzen.JustifyContent.Start">
                        <RadzenIcon Icon="location_on" Class="rz-text-primary" Style="font-size: 1.5rem;" />
                        <RadzenText Text="Nice, France" TextStyle="TextStyle.Body1" /> @* Remplacez par votre ville/pays *@
                    </RadzenStack>

                    <RadzenDivider class="rz-my-3" /> @* Visual separator *@

                    <RadzenText Text="Retrouvez-moi sur les réseaux sociaux" TextStyle="TextStyle.Subtitle1" TagName="TagName.H3" Class="rz-mb-2" />
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.Center">
                        <RadzenLink Path="https://www.linkedin.com/in/serigne-rawane-diop-7aa3931bb" Target="_blank">
                            <RadzenImage Path="linkedin-svgrepo-com.svg" Style="width: 64px; height: 64px;" AlternateText="LinkedIn" />
                        </RadzenLink>
                        <RadzenLink Path="https://github.com/dioprawane" Target="_blank">
                            <RadzenImage Path="github-142-svgrepo-com.svg" Style="width: 64px; height: 64px;" AlternateText="GitHub" />
                        </RadzenLink>
                        <RadzenLink Path="https://www.instagram.com/diop_rawane?igsh=dDlyb284Z25zcjU3&utm_source=qr" Target="_blank">
                            <RadzenImage Path="instagram-1-svgrepo-com.svg" Style="width: 64px; height: 64px;" AlternateText="Instagram" />
                        </RadzenLink>
                    </RadzenStack>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="5" Class="equal-col">
            <RadzenFieldset Text="Envoyez-moi un message"
                            Class="rz-shadow-1 equal-card"
                            Style="display:flex; flex-direction:column; justify-content:flex-start;">
                <RadzenTemplateForm Data="@model" Submit="@((args) => OnSubmit(args))" TItem="ContactFormModel" InvalidSubmit="@OnInvalidSubmit">
                    <RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Votre Nom" Component="Name" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox @bind-Value="model.Name" Placeholder="Votre nom complet" Class="w-100" Name="Name" />
                                <RadzenRequiredValidator Component="Name" Text="Le nom est requis" Popup="true" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Votre Email" Component="Email" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox @bind-Value="model.Email" Placeholder="votre.email@example.com" Class="w-100" Name="Email" />
                                <RadzenRequiredValidator Component="Email" Text="L'email est requis" Popup="true" />
                                <RadzenEmailValidator Component="Email" Text="Format d'email invalide" Popup="true" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Sujet" Component="Subject" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox @bind-Value="model.Subject" Placeholder="Sujet du message" Class="w-100" Name="Subject" />
                                <RadzenRequiredValidator Component="Subject" Text="Le sujet est requis" Popup="true" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Start">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Votre Message" Component="Message" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextArea @bind-Value="model.Message" Rows="5" Placeholder="Écrivez votre message ici..." Class="w-100" Name="Message" />
                                <RadzenRequiredValidator Component="Message" Text="Le message est requis" Popup="true" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenColumn Size="12" Class="rz-text-align-center rz-pt-3">
                                <RadzenColumn Size="12" Class="rz-text-align-center submit-row">
                                    <RadzenButton ButtonType="ButtonType.Submit" Text="Envoyer le message"
                                                  ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" Icon="send" />
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenTemplateForm>
            </RadzenFieldset>
        </RadzenColumn>
    </RadzenRow>

</RadzenStack>

@code {
    [Parameter] public bool ShowPageTitle { get; set; } = true;
    // Modèle pour le formulaire de contact
    //EventConsole console;
    public class ContactFormModel
    {
        [Required(ErrorMessage = "Le nom est requis")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "L'email est requis")]
        [EmailAddress(ErrorMessage = "Format d'email invalide")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Le sujet est requis")]
        public string? Subject { get; set; }

        [Required(ErrorMessage = "Le message est requis")]
        public string? Message { get; set; }
    }

    ContactFormModel model = new ContactFormModel();

    // Accès aux paramètres
    private string publicKey => EmailJSOptions!.Value!.PublicKey!;
    private string serviceId => EmailJSOptions!.Value!.ServiceId!;
    private string templateId => EmailJSOptions!.Value!.TemplateId!;

    // Méthode appelée lorsque le formulaire est soumis et valide
    async Task OnSubmit(ContactFormModel args)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Envoi en cours...", Detail = "Votre message est en cours d'envoi.", Duration = 4000 });

        // IMPORTANT: Ici, vous implémenteriez la logique d'envoi de l'e-mail à votre API backend ou service tiers.
        // Comme expliqué précédemment, vous ne pouvez PAS envoyer d'e-mails directement depuis Blazor WebAssembly.

        /*// Simuler un envoi réussi
        await Task.Delay(2000); // Délai pour simuler une requête réseau

        // Afficher une notification de succès
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Succès", Detail = "Votre message a été envoyé avec succès. Je vous répondrai dès que possible !", Duration = 5000 });

        // Réinitialiser le formulaire après l'envoi
        model = new ContactFormModel();
        StateHasChanged(); // Pour rafraîchir l'UI après la réinitialisation du modèle*/
        try
        {
            if (string.IsNullOrWhiteSpace(publicKey) ||
                string.IsNullOrWhiteSpace(serviceId) ||
                string.IsNullOrWhiteSpace(templateId))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Config EmailJS manquante",
                    Detail = $"PK:{publicKey ?? "null"} | SID:{serviceId ?? "null"} | TID:{templateId ?? "null"}"
                });
                return;
            }

            //await JSRuntime.InvokeVoidAsync("sendEmail", model);
            // Appelez la fonction JS en lui passant les paramètres
            await JSRuntime.InvokeVoidAsync("sendEmail", model, publicKey, serviceId, templateId);

            // Simuler un envoi réussi
            await Task.Delay(2000); // Délai pour simuler une requête réseau

            // Afficher une notification de succès
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Succès", Detail = "Votre message a été envoyé avec succès. Je vous répondrai dès que possible !", Duration = 5000 });

            // Réinitialiser le formulaire après l'envoi
            model = new ContactFormModel();
            StateHasChanged(); // Pour rafraîchir l'UI après la réinitialisation du modèle
        }
        catch (JSException ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erreur", Detail = $"Échec de l'envoi du message : {ex.Message}", Duration = 5000 });
        }
    }

    // Méthode appelée lorsque le formulaire est soumis et contient des erreurs de validation
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }
}
@page "/competences"

@using BlazorPortfolio.Models
@using Radzen
@using Radzen.Blazor
@inject Radzen.DialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>Compétences</PageTitle>
                       
@if (isMobile == null)                  
{
    <p>Chargement des compétences...</p>
}
else if (isMobile == true)
{
    <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" Class="rz-p-2 rz-shadow-4 rz-border-radius-2" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
        <RadzenText TextStyle="TextStyle.H4" Class="rz-mb-2" TextAlignment="TextAlignment.Center">✨ Compétences</RadzenText>

        <RadzenCard class="rz-p-2 rz-w-100" Variant="Variant.Outlined">

            <RadzenCard class="rz-p-2 rz-mb-3" Variant="Variant.Flat">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.2rem">
                    <RadzenText TextStyle="TextStyle.Caption" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" /> Débutant (1 étoile)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" /> Fondamental (2 étoiles)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" /> Intermédiaire (3 étoiles)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" /> Avancé (4 étoiles)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 0.9em; vertical-align: middle;" /> Expert (5 étoiles)
                    </RadzenText>
                </RadzenStack>
            </RadzenCard>

            <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-text-center rz-mb-2">Aperçu des Compétences</RadzenText>

            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="1rem" JustifyContent="JustifyContent.Center">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.2rem" AlignItems="AlignItems.Center">
                    <RadzenText Text="Auto-cycle" TextStyle="TextStyle.Caption" />
                    <RadzenSwitch @bind-Value="@auto" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "auto-cycle" }})" />
                </RadzenStack>

                <RadzenStack Orientation="Orientation.Vertical" Gap="0.2rem" AlignItems="AlignItems.Center">
                    <RadzenText Text="Naviguer" TextStyle="TextStyle.Caption" />
                    <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="0.5rem" JustifyContent="JustifyContent.Center">
                        <RadzenButton Text="@toggleText" Click="@Toggle"
                                      ButtonStyle="ButtonStyle.Base" Variant="Variant.Outlined"
                                      Size="ButtonSize.Small"
                                      Style="padding: 0.3rem 0.6rem; font-size: 0.75rem;" />

                        <RadzenButton Text="Première"
                                      Click="@(args => carousel!.Navigate(0))"
                                      ButtonStyle="ButtonStyle.Base" Variant="Variant.Outlined"
                                      Size="ButtonSize.Small"
                                      Disabled="@(selectedIndex == 0)"
                                      Style="padding: 0.3rem 0.6rem; font-size: 0.75rem;" />

                        <RadzenButton Text="Dernière"
                                      Click="@(args => carousel!.Navigate(Competencies?.Count() - 1 ?? 0))"
                                      ButtonStyle="ButtonStyle.Base" Variant="Variant.Outlined"
                                      Size="ButtonSize.Small"
                                      Disabled="@(selectedIndex == (Competencies?.Count() - 1 ?? 0))"
                                      Style="padding: 0.3rem 0.6rem; font-size: 0.75rem;" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>

            <RadzenCarousel @ref=carousel @bind-SelectedIndex="@selectedIndex" Auto="@auto" Interval="@interval"
                            PagerOverlay="true" ButtonShade="Shade.Light" ShowPager="true" ShowArrows="true"
                            Style="height:200px; width: 100%;">
                <Items>
                    @if (Competencies != null && Competencies.Any())
                    {
                        @foreach (var competence in Competencies)
                        {
                            <RadzenCarouselItem>
                                <RadzenCard Class="rz-w-95 rz-mx-auto rz-p-3 rz-shadow-2" Style="height: 180px; display: flex; flex-direction: column; justify-content: center; align-items: center; border-radius: 8px;">
                                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0.3rem">
                                        @if (!string.IsNullOrEmpty(competence.Icon))
                                        {
                                            @if (competence.Icon.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ||
                                                 competence.Icon.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) ||
                                                 competence.Icon.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase) ||
                                                 competence.Icon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
                                            {
                                                <img src="@($"/images/{competence.Icon}")" alt="@competence.Name icon" style="width: 1.6em; height: 1.6em; object-fit: contain;" /> 
                                            }
                                            else
                                            {
                                                <RadzenIcon Icon="@competence.Icon" Style="font-size: 1.6em; color: var(--rz-text-secondary-color);" />
                                            }
                                        }
                                        <RadzenText TextStyle="TextStyle.H6" Class="rz-mb-0 rz-text-center">@competence.Name</RadzenText> 
                                        <RadzenText TextStyle="TextStyle.Caption" Class="rz-color-secondary rz-text-center">@competence.Category</RadzenText> 
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.1rem" Class="rz-mt-1">
                                            @for (int i = 0; i < competence.Level; i++)
                                            {
                                                <RadzenIcon Icon="star" Style="color: gold; font-size: 1.3em;" /> 
                                            }
                                            @for (int i = competence.Level; i < 5; i++)
                                            {
                                                <RadzenIcon Icon="star_border" Style="color: lightgray; font-size: 1.3em;" /> 
                                            }
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenCarouselItem>
                        }
                    }
                    else
                    {
                        <RadzenCarouselItem>
                            <RadzenCard Class="rz-w-95 rz-mx-auto rz-p-3 rz-shadow-2" Style="height: 180px; display: flex; flex-direction: column; justify-content: center; align-items: center; border-radius: 8px;">
                                <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-center">Aucune compétence à afficher pour le moment.</RadzenText>
                            </RadzenCard>
                        </RadzenCarouselItem>
                    }
                </Items>
            </RadzenCarousel>
        </RadzenCard>

        @* --- Section 2: Categorized list for Mobile --- *@
        <RadzenCard class="rz-p-2 rz-mt-2 rz-w-100" Variant="Variant.Outlined"> 
            <RadzenText TextStyle="TextStyle.H5" Class="rz-mb-3 rz-text-center">Compétences par Catégorie</RadzenText> 

            @if (GroupedCompetences != null && GroupedCompetences.Any())
            {
                @foreach (var categoryGroup in GroupedCompetences)
                {
                    <RadzenText TextStyle="TextStyle.H6" Class="rz-mt-3 rz-mb-1">@categoryGroup.Key</RadzenText> 
                    <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                        @if (categoryGroup.Any())
                        {
                            @foreach (var competence in categoryGroup)
                            {
                                <RadzenCard Class="rz-p-2 rz-shadow-1" Variant="Variant.Outlined"
                                            Style="border-left: 3px solid var(--rz-primary-color); border-radius: 4px;"> 
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" Style="width: 100%;"> 
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.2rem"> 
                                            @if (!string.IsNullOrEmpty(competence.Icon))
                                            {
                                                @if (competence.Icon.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ||
                                                     competence.Icon.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) ||
                                                     competence.Icon.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase) ||
                                                     competence.Icon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
                                                {
                                                    <img src="@($"/images/{competence.Icon}")" alt="@competence.Name icon" style="width: 1.5em; height: 1.5em; object-fit: contain;" /> 
                                                }
                                                else
                                                {
                                                    <RadzenIcon Icon="@competence.Icon" Style="font-size: 1.5em; color: var(--rz-text-secondary-color);" /> 
                                                }
                                            }
                                            <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-bold">@competence.Name</RadzenText>
                                        </RadzenStack>

                                        <div style="flex-grow:1;"></div>

                                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="0.1rem"> 
                                            <RadzenText TextStyle="TextStyle.Caption" Class="rz-color-base rz-text-bold">@GetLevelDescription(competence.Level)</RadzenText> 
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.1rem"> 
                                                @for (int i = 0; i < competence.Level; i++)
                                                {
                                                    <RadzenIcon Icon="star" Style="color: gold; font-size: 1.2em;" /> 
                                                }
                                                @for (int i = competence.Level; i < 5; i++)
                                                {
                                                    <RadzenIcon Icon="star_border" Style="color: lightgray; font-size: 1.2em;" />
                                                }
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenCard>
                            }
                        }
                    </RadzenStack>
                }
            }
            else
            {
                <RadzenText Text="Aucune compétence à afficher." Class="rz-text-center" />
            }
        </RadzenCard>
    </RadzenStack>
}
else
{
    <RadzenStack Orientation="Orientation.Vertical" Gap="2rem" Class="rz-p-4 rz-p-md-8">

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Class="rz-mb-2">
            <RadzenIcon Icon="engineering" Style="font-size: 2em;" />
            <RadzenText TextStyle="TextStyle.H3" Class="rz-mb-2" TextAlignment="TextAlignment.Center"> Compétences </RadzenText>
        </RadzenStack>

        @* --- Section 1: RadzenCarousel for a dynamic overview --- *@
        <RadzenCard class="rz-p-4" Variant="Variant.Outlined">

            @* --- NEW: Legend for Skill Levels --- *@
            <RadzenCard class="rz-p-3 rz-mb-4" Variant="Variant.Flat">
                <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-mb-2">Légende des Niveaux de Compétence :</RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="1rem" JustifyContent="JustifyContent.Center">
                    <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" /> Débutant (1 étoile)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" /> Fondamental (2 étoiles)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" /> Intermédiaire (3 étoiles)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" /> Avancé (4 étoiles)
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary">
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" />
                        <RadzenIcon Icon="star" Style="color: gold; font-size: 1.1em; vertical-align: middle;" /> Expert (5 étoiles)
                    </RadzenText>
                </RadzenStack>
            </RadzenCard>

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap" Class="rz-mb-4">
                <RadzenStack Orientation="Orientation.Vertical" Gap="8px">
                    Auto-cycle
                    <RadzenSwitch @bind-Value="@auto" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "auto-cycle" }})" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="8px" Class="rz-ml-4">
                    Navigate
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="16px">
                        <RadzenToggleButton Text="@toggleText" Click="@Toggle" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Size="ButtonSize.Small" />
                        <RadzenButton Text="Première" Click="@(args => carousel!.Navigate(0))" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Size="ButtonSize.Small" Disabled="@(selectedIndex == 0)" />
                        <RadzenButton Text="Dernière" Click="@(args => carousel!.Navigate(Competencies?.Count() - 1 ?? 0))" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Size="ButtonSize.Small" Disabled="@(selectedIndex == (Competencies?.Count() - 1 ?? 0))" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>

            @* Improved RadzenCarousel design *@
            <RadzenCarousel @ref=carousel @bind-SelectedIndex="@selectedIndex" Auto="@auto" Interval="@interval" PagerOverlay="true" ButtonShade="Shade.Light" ShowPager="true" ShowArrows="true" Style="height:280px; width: 100%;">
                <Items>
                    @if (Competencies != null && Competencies.Any())
                    {
                        @foreach (var competence in Competencies)
                        {
                            <RadzenCarouselItem>
                                <RadzenCard Class="rz-w-90 rz-mx-auto rz-p-4 rz-shadow-2" Style="height: 250px; display: flex; flex-direction: column; justify-content: center; align-items: center; border-radius: 10px;">
                                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0.5rem">
                                        @if (!string.IsNullOrEmpty(competence.Icon))
                                        {
                                            // Check if the icon is a file path (e.g., ends with .png, .jpg, .svg)
                                            @if (competence.Icon.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ||
                                                                        competence.Icon.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) ||
                                                                        competence.Icon.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase) ||
                                                                        competence.Icon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase))
                                            {
                                                <img src="@($"/images/{competence.Icon}")" alt="@competence.Name icon" style="width: 1.5em; height: 1.5em; margin-right: 0.5rem;" />
                                            }
                                            else // Assume it's a Radzen/Material Icon
                                            {
                                                <RadzenIcon Icon="@competence.Icon"
                                                            Style="font-size: 1.5em; color: var(--rz-text-secondary-color);" />
                                            }
                                        }
                                        <RadzenText TextStyle="TextStyle.H5" Class="rz-mb-1 rz-text-center">@competence.Name</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-color-secondary rz-text-center">@competence.Category</RadzenText>
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.2rem" Class="rz-mt-2">
                                            @for (int i = 0; i < competence.Level; i++)
                                            {
                                                <RadzenIcon Icon="star" Style="color: gold;" />
                                            }
                                            @for (int i = competence.Level; i < 5; i++)
                                            {
                                                <RadzenIcon Icon="star_border" Style="color: lightgray;" />
                                            }
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenCarouselItem>
                        }
                    }
                    else
                    {
                        <RadzenCarouselItem>
                            <RadzenCard Class="rz-w-90 rz-mx-auto rz-p-4 rz-shadow-2" Style="height: 250px; display: flex; flex-direction: column; justify-content: center; align-items: center; border-radius: 10px;">
                                <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-center">Aucune compétence à afficher pour le moment.</RadzenText>
                            </RadzenCard>
                        </RadzenCarouselItem>
                    }
                </Items>
            </RadzenCarousel>
        </RadzenCard>

        @* --- Section 2: Compétences par catégorie (design premium) --- *@
        <RadzenCard class="rz-p-5 skill-wrap" Variant="Variant.Outlined">
            <div class="skill-header">
                <RadzenIcon Icon="workspace_premium" />
                <RadzenText TextStyle="TextStyle.H3">Compétences par Catégorie</RadzenText>
            </div>

            @if (GroupedCompetences != null && GroupedCompetences.Any())
            {
                @foreach (var categoryGroup in GroupedCompetences)
                {
                    <h3 class="skill-category">@categoryGroup.Key</h3>

                    <div class="skill-grid">
                        @foreach (var c in categoryGroup)
                        {
                            <RadzenCard Class="skill-card" Variant="Variant.Flat">
                                <div class="skill-card__accent"></div>

                                <div class="skill-card__left">
                                    @if (!string.IsNullOrEmpty(c.Icon)
                                                        && (c.Icon.EndsWith(".png", StringComparison.OrdinalIgnoreCase)
                                                        || c.Icon.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase)
                                                        || c.Icon.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase)
                                                        || c.Icon.EndsWith(".svg", StringComparison.OrdinalIgnoreCase)))
                                    {
                                        <img class="skill-icon" src="@($"/images/{c.Icon}")" alt="@c.Name" />
                                    }
                                    else
                                    {
                                        <div class="skill-icon skill-icon--chip">
                                            <RadzenIcon Icon="@(string.IsNullOrWhiteSpace(c.Icon) ? "apps" : c.Icon)" />
                                        </div>
                                    }
                                </div>

                                <div class="skill-card__main">
                                    <div class="skill-title">@c.Name</div>

                                    <div class="skill-stars" aria-label="niveau">
                                        @for (int i = 0; i < c.Level; i++)
                                        {
                                            <RadzenIcon Icon="star" class="star star--full" />
                                        }
                                        @for (int i = c.Level; i < 5; i++)
                                        {
                                            <RadzenIcon Icon="star" class="star" />
                                        }
                                    </div>

                                    <div class="skill-bar">
                                        <div class="skill-bar__fill" style="width:@(c.Level * 20)%"></div>
                                    </div>
                                </div>

                                <div class="skill-card__right">
                                    <span class="skill-badge">@($"{c.Level}/5")</span>
                                </div>
                            </RadzenCard>
                        }
                    </div>
                }
            }
            else
            {
                <RadzenText Text="Aucune compétence à afficher." class="rz-text-center" />
            }
        </RadzenCard>


    </RadzenStack>
}

<style>
    /* ====== Premium Skills ====== */
    .skill-wrap {
        border-radius: 14px;
    }

    .skill-header {
        display: flex;
        align-items: center;
        gap: .6rem;
        margin-bottom: 1.2rem;
    }

        .skill-header .rz-icon {
            font-size: 1.8rem;
            color: var(--rz-primary);
        }

    .skill-category {
        margin: 1.6rem 0 .8rem;
        font-weight: 800;
        letter-spacing: .3px;
        font-size: clamp(1.2rem, .9rem + .8vw, 1.6rem);
    }

    .skill-grid {
        display: grid;
        gap: 14px;
        grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
    }

    .skill-card {
        position: relative;
        display: grid;
        grid-template-columns: auto 1fr auto;
        align-items: center;
        gap: 14px;
        padding: 14px 16px;
        border-radius: 12px;
        border: 1px solid rgba(0,0,0,.06);
        box-shadow: 0 1px 2px rgba(0,0,0,.04);
        transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
        background: var(--rz-card-background,var(--rz-base-background));
        overflow: hidden;
    }

        .skill-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 22px rgba(0,0,0,.10), 0 2px 6px rgba(0,0,0,.06);
            border-color: rgba(25,118,210,.25);
        }

    .skill-card__accent {
        position: absolute;
        inset: 0 0 auto 0;
        height: 3px;
        background: linear-gradient(90deg, #64b5f6, #a78bfa, #f472b6);
        opacity: .9;
    }

    /* left icon */
    .skill-icon {
        width: 42px;
        height: 42px;
        border-radius: 12px;
        object-fit: contain;
        background: #fff;
        border: 1px solid rgba(0,0,0,.06);
        box-shadow: 0 2px 10px rgba(0,0,0,.06);
    }

    .skill-icon--chip {
        display: grid;
        place-items: center;
        background: #eef2f7;
        color: #475569;
    }

        .skill-icon--chip .rz-icon {
            font-size: 22px;
        }

    /* middle column */
    .skill-title {
        font-weight: 700;
        line-height: 1.15;
        letter-spacing: .2px;
        margin-bottom: 4px;
    }

    /* stars */
    .skill-stars {
        display: flex;
        gap: 2px;
        margin-bottom: 6px;
    }

    .star {
        color: #cbd5e1;
        transition: transform .15s ease, color .15s ease;
    }

    .star--full {
        color: #f6c453;
        filter: drop-shadow(0 1px 0 rgba(0,0,0,.05));
    }

    .skill-card:hover .star--full {
        transform: translateY(-1px);
    }

    /* level bar */
    .skill-bar {
        height: 6px;
        background: #e8edf4;
        border-radius: 999px;
        overflow: hidden;
    }

    .skill-bar__fill {
        height: 100%;
        border-radius: 999px;
        background: linear-gradient(90deg, #60a5fa, #7c3aed);
        transition: width .35s ease;
    }

    /* right badge */
    .skill-badge {
        background: #eef2f7;
        color: #334155;
        font-weight: 700;
        padding: .25rem .5rem;
        border-radius: 999px;
        font-size: .8rem;
        box-shadow: 0 1px 2px rgba(0,0,0,.06);
    }

    /* Dark mode */
    @@media (prefers-color-scheme: dark) {
        .skill-card

    {
        border-color: rgba(255,255,255,.08);
        background: #0f1317;
    }

    .skill-icon {
        background: #0c0f12;
        border-color: rgba(255,255,255,.06);
    }

    .skill-icon--chip {
        background: #122033;
        color: #dbeafe;
    }

    .skill-badge {
        background: #16202b;
        color: #e5e7eb;
    }

    .skill-bar {
        background: #152030;
    }

    }

    /* Motion preferences */
    @@media (prefers-reduced-motion: reduce) {
        .skill-card, .star, .skill-bar__fill

    {
        transition: none !important;
    }

    }
</style>

@code {
    RadzenCarousel? carousel;

    bool auto = true;
    double interval = 4000;
    string toggleText = "Stop";

    bool started = true;
    void Toggle()
    {
        if (started)
        {
            carousel!.Stop();
            toggleText = "Start";
        }
        else
        {
            carousel!.Start();
            toggleText = "Stop";
        }

        started = !started;
    }

    int selectedIndex;

    private List<Competence>? Competencies;
    private IEnumerable<IGrouping<string, Competence>>? GroupedCompetences;
    private string? selectedCategory;
    private List<string>? categories => GroupedCompetences?.Select(g => g.Key).ToList();
    private bool? isMobile = null;

    private string GetLevelDescription(int level)
    {
        return level switch
        {
            1 => "Débutant",
            2 => "Fondamental",
            3 => "Intermédiaire",
            4 => "Avancé",
            5 => "Expert",
            _ => "Non défini" // Default case for unexpected levels
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // JavaScript interop to get window width
            var width = await JSRuntime.InvokeAsync<int>("getWindowWidth");
            Console.WriteLine($"💡 Largeur détectée : {width}px");
            isMobile = width <= 768; // Detect if width is less than or equal to 768px (typical mobile breakpoint)
            StateHasChanged(); // Notify Blazor that the component state has changed
        }
    }

    protected override void OnInitialized()
    {
        // Populate with your actual competence data
        /*Competencies = new List<Competence>
        {
            new Competence { Name = "C#", Category = "Langages de programmation", Level = 5, Icon = "code" },
            new Competence { Name = "Blazor", Category = "Frameworks", Level = 4, Icon = "blazor.svg" },
            new Competence { Name = ".NET Core", Category = "Frameworks", Level = 4, Icon = "apps" },
            new Competence { Name = "ASP.NET Core", Category = "Frameworks", Level = 4, Icon = "web" },
            new Competence { Name = "SQL Server", Category = "Bases de données", Level = 3, Icon = "storage" },
            new Competence { Name = "JavaScript", Category = "Langages de programmation", Level = 3, Icon = "javascript" },
            new Competence { Name = "HTML5", Category = "Technologies Web", Level = 4, Icon = "html" },
            new Competence { Name = "CSS3", Category = "Technologies Web", Level = 3, Icon = "css" },
            new Competence { Name = "Git", Category = "Outils de développement", Level = 4, Icon = "github.svg" },
            new Competence { Name = "Azure DevOps", Category = "Outils de développement", Level = 3, Icon = "cloud_queue" },
            new Competence { Name = "Docker", Category = "DevOps", Level = 2, Icon = "padding" },
            new Competence { Name = "Méthodes Agiles (Scrum)", Category = "Méthodologies", Level = 4, Icon = "done_all" },
            new Competence { Name = "Anglais", Category = "Langues", Level = 4, Icon = "language" },
            new Competence { Name = "Communication", Category = "Soft Skills", Level = 4, Icon = "forum" }
        };*/
        Competencies = new List<Competence>
        {
            // Langages (CV: Python, Java, SQL, C#, JavaScript, R, Kotlin, Dart)
            new Competence { Name = "Python",      Category = "Langages de programmation", Level = 4, Icon = "python.svg" },        // niveau courant
            new Competence { Name = "Java",        Category = "Langages de programmation", Level = 4, Icon = "java.svg" },        // courant
            new Competence { Name = "C#",          Category = "Langages de programmation", Level = 4, Icon = "csharp.svg" },        // courant
            new Competence { Name = "SQL",         Category = "Langages de programmation", Level = 4, Icon = "sql.svg" },        // courant
            new Competence { Name = "JavaScript",  Category = "Langages de programmation", Level = 3, Icon = "js.svg" },
            new Competence { Name = "TypeScript",  Category = "Langages de programmation", Level = 2, Icon = "ts.svg" },
            new Competence { Name = "R",           Category = "Langages de programmation", Level = 4, Icon = "r.svg" },
            new Competence { Name = "Kotlin",      Category = "Langages de programmation", Level = 2, Icon = "kotlin.svg" },
            new Competence { Name = "Dart",        Category = "Langages de programmation", Level = 2, Icon = "dart2.png" },

            // Frameworks & bibliothèques (CV)
            new Competence { Name = ".NET Core",   Category = "Frameworks", Level = 3, Icon = "dotnet.svg" },
            new Competence { Name = "Angular",     Category = "Frameworks", Level = 4, Icon = "angular.svg" },
            new Competence { Name = "React",       Category = "Frameworks", Level = 3, Icon = "react.svg" },
            new Competence { Name = "Node.js",     Category = "Frameworks", Level = 3, Icon = "nodejs.svg" },
            new Competence { Name = "Flutter",     Category = "Frameworks", Level = 2, Icon = "flutter.svg" },
            new Competence { Name = "Spring Boot", Category = "Frameworks", Level = 3, Icon = "spring-logo.svg" },
            new Competence { Name = "FastAPI",     Category = "Frameworks", Level = 4, Icon = "bolt" },
            new Competence { Name = "Swagger",     Category = "Frameworks", Level = 4, Icon = "swagger.svg" },
            new Competence { Name = "LangChain",   Category = "Frameworks", Level = 3, Icon = "hub" },

            // IA / Data Science (CV)
            new Competence { Name = "Machine Learning",   Category = "IA & Data", Level = 4, Icon = "psychology" },
            new Competence { Name = "Deep Learning",      Category = "IA & Data", Level = 4, Icon = "memory" },
            new Competence { Name = "Computer Vision",    Category = "IA & Data", Level = 4, Icon = "visibility" },
            new Competence { Name = "NLP",                Category = "IA & Data", Level = 3, Icon = "translate" },
            new Competence { Name = "Federated Learning", Category = "IA & Data", Level = 3, Icon = "group_work" },
            new Competence { Name = "PyTorch",            Category = "IA & Data", Level = 4, Icon = "pytorch.svg" },
            new Competence { Name = "TensorFlow",         Category = "IA & Data", Level = 4, Icon = "tensorflow.svg" },

            // Bases de données (CV)
            new Competence { Name = "SQL Server", Category = "Bases de données", Level = 3, Icon = "sqlserver.svg" },
            new Competence { Name = "MySQL",      Category = "Bases de données", Level = 4, Icon = "mysql.svg" },
            new Competence { Name = "MariaDB",    Category = "Bases de données", Level = 3, Icon = "mariadb.svg" },
            new Competence { Name = "PostgreSQL", Category = "Bases de données", Level = 3, Icon = "postgresql.svg" },
            new Competence { Name = "MongoDB",    Category = "Bases de données", Level = 4, Icon = "mongodb.svg" },
            new Competence { Name = "Cassandra",  Category = "Bases de données", Level = 2, Icon = "cassandra.svg" },

            // === APIs ===
            new Competence { Name = "JSON", Category = "APIs", Level = 3, Icon = "json.svg" },
            new Competence { Name = "REST", Category = "APIs", Level = 3, Icon = "api" },
            new Competence { Name = "SOAP", Category = "APIs", Level = 2, Icon = "soap.svg" },
            new Competence { Name = "XML",  Category = "APIs", Level = 3, Icon = "xml.svg" },

            // === Outils ===
            // Outils & autres (CV)
            new Competence { Name = "Docker",     Category = "Outils & Plateformes", Level = 3, Icon = "docker2.svg" },
            new Competence { Name = "GitHub",     Category = "Outils & Plateformes", Level = 4, Icon = "github.svg" },
            new Competence { Name = "IoT",        Category = "Outils & Plateformes", Level = 2, Icon = "sensors" },
            new Competence { Name = "Power BI",   Category = "Outils & Plateformes", Level = 4, Icon = "powrbii.png" },
            new Competence { Name = "VS Code",    Category = "Outils & Plateformes", Level = 4, Icon = "vscode.svg" },
            new Competence { Name = "Visual Studio",  Category = "Outils & Plateformes", Level = 4, Icon = "visualstudio.svg" },
            new Competence { Name = "Eclipse",   Category = "Outils & Plateformes", Level = 3, Icon = "eclipse.svg" },
            new Competence { Name = "Android Studio", Category = "Outils & Plateformes", Level = 3, Icon = "android.svg" },
            new Competence { Name = "IntelliJ IDEA",   Category = "Outils & Plateformes", Level = 3, Icon = "intellij.svg" },

            new Competence { Name = "Agile", Category = "Méthodologies & Gestion de projet", Level = 3, Icon = "dashboard" },
            new Competence { Name = "Github Projects", Category = "Méthodologies & Gestion de projet", Level = 4, Icon = "github.svg" },
            new Competence { Name = "Jira", Category = "Méthodologies & Gestion de projet", Level = 3, Icon = "jira.svg" },

            // BPM / Process (expérience URSSAF : ITEROP & JUEL)
            new Competence { Name = "BPM Iterop", Category = "Process & BPM", Level = 3, Icon = "schema" },
            new Competence { Name = "JUEL",       Category = "Process & BPM", Level = 3, Icon = "schema" },

            // Langues (CV)
            new Competence { Name = "Français", Category = "Langues", Level = 5, Icon = "france.svg" },
            new Competence { Name = "Anglais",  Category = "Langues", Level = 2, Icon = "anglais.png" },
            new Competence { Name = "Wolof",    Category = "Langues", Level = 5, Icon = "senegal.svg" },

        };

        // Tri & groupements inchangés
        /*Competencies = (Competencies ?? new List<Competence>()).OrderBy(c => c.Name).ToList();
        GroupedCompetences = Competencies.OrderBy(c => c.Category).ThenBy(c => c.Name).GroupBy(c => c.Category);*/
        // Ordre d'affichage des catégories dans la section "par catégorie"
        var categoryOrder = new Dictionary<string, int>
        {
            { "Langages de programmation", 1 },
            { "Frameworks",               2 },
            { "Bases de données",         4 },
            { "IA & Data",                3 },
            { "APIs",                     5 },
            { "Outils & Plateformes",     6 },

            // on force ces 2 à la fin :
            { "Méthodologies",           97 },
            { "Process & BPM",           98 },
            { "Langues",                 99 }
        };

        // Tri des items pour la grille + regroupement dans l'ordre voulu
        Competencies = (Competencies ?? new List<Competence>())
            .OrderBy(c => categoryOrder.TryGetValue(c.Category, out var o) ? o : 50)
            .ThenBy(c => c.Name)
            .ToList();

        GroupedCompetences = Competencies
            .GroupBy(c => c.Category)
            .OrderBy(g => categoryOrder.TryGetValue(g.Key, out var o) ? o : 50);



        // For the carousel (ordered by name for simplicity)
        //Competencies = Competencies.OrderBy(c => c.Name).ToList();
        /*Competencies = (Competencies ?? new List<Competence>())
            .OrderBy(c => c.Name)
            .ToList();

        GroupedCompetences = Competencies
            .OrderBy(c => c.Category) // Order categories alphabetically
            .ThenBy(c => c.Name) // Order competencies within categories alphabetically
            .GroupBy(c => c.Category);*/

        // Afficher le GroupedCompetences
        // Add these lines for more detailed debugging
        Console.WriteLine($"Number of total competencies: {Competencies?.Count ?? 0}");
        Console.WriteLine($"Number of groups: {GroupedCompetences?.Count() ?? 0}");

        if (GroupedCompetences != null)
        {
            foreach (var group in GroupedCompetences)
            {
                Console.WriteLine($"Group: {group.Key}, Count: {group.Count()}");
                foreach (var comp in group)
                {
                    Console.WriteLine($"  - Competence: {comp.Name}");
                }
            }
        }
        else
        {
            Console.WriteLine("GroupedCompetences is null.");
        }

    }
}